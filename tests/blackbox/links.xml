<?xml version="1.0" encoding="UTF-8"?>

<test>
    
<!--
  Copyright 2009 Yusuf Simonson
  This file is part of Snowball.
  
  Snowball is free software: you can redistribute it and/or modify it under the
  terms of the GNU Affero General Public License as published by the Free
  Software Foundation, either version 3 of the License, or (at your option) any
  later version.

  Snowball is distributed in the hope that it will be useful, but WITHOUT ANY
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
  A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
  details.

  You should have received a copy of the GNU Affero General Public License
  along with Snowball.  If not, see <http://www.gnu.org/licenses/>.
-->
    
<!-- First insert sample nodes -->

<testcase>
<name>PUT a sample node</name>
<requestMethod>PUT</requestMethod>
<requestURL>http://localhost:8080/nodes/a</requestURL>
<headers />
<authentication>
    <username>blackbox1</username>
    <password>sandbox</password>
</authentication>
<expectedOutput type="python">
assert response.code == 200, 'expected a response code of 200 but got %s instead' % response.code
</expectedOutput>
</testcase>

<testcase>
<name>PUT a sample node</name>
<requestMethod>PUT</requestMethod>
<requestURL>http://localhost:8080/nodes/b</requestURL>
<headers />
<authentication>
    <username>blackbox1</username>
    <password>sandbox</password>
</authentication>
<expectedOutput type="python">
assert response.code == 200, 'expected a response code of 200 but got %s instead' % response.code
</expectedOutput>
</testcase>

<testcase>
<name>PUT a sample node</name>
<requestMethod>PUT</requestMethod>
<requestURL>http://localhost:8080/nodes/x</requestURL>
<headers />
<authentication>
    <username>blackbox2</username>
    <password>sandbox</password>
</authentication>
<expectedOutput type="python">
assert response.code == 200, 'expected a response code of 200 but got %s instead' % response.code
</expectedOutput>
</testcase>

<!-- Illegal PUT attempts -->

<testcase>
<name>PUT link with improper credentials</name>
<requestMethod>PUT</requestMethod>
<requestURL>http://localhost:8080/links/x/a</requestURL>
<headers />
<authentication>
    <username>blackbox1</username>
    <password>sandbox</password>
</authentication>
<inputbody type="post">
    <weight>1.0</weight>
</inputbody>
<expectedOutput type="python">
assert response.code == 403, 'expected a response code of 403 but got %s instead' % response.code
</expectedOutput>
</testcase>

<testcase>
<name>PUT link without a weight</name>
<requestMethod>PUT</requestMethod>
<requestURL>http://localhost:8080/links/a/b</requestURL>
<headers />
<authentication>
    <username>blackbox1</username>
    <password>sandbox</password>
</authentication>
<expectedOutput type="python">
assert response.code == 400, 'expected a response code of 400 but got %s instead' % response.code
</expectedOutput>
</testcase>

<testcase>
<name>PUT link with a non-float weight</name>
<requestMethod>PUT</requestMethod>
<requestURL>http://localhost:8080/links/a/b</requestURL>
<headers />
<authentication>
    <username>blackbox1</username>
    <password>sandbox</password>
</authentication>
<inputbody type="post">
    <weight>a</weight>
</inputbody>
<expectedOutput type="python">
assert response.code == 400, 'expected a response code of 400 but got %s instead' % response.code
</expectedOutput>
</testcase>

<testcase>
<name>PUT link with too negative of a weight</name>
<requestMethod>PUT</requestMethod>
<requestURL>http://localhost:8080/links/a/b</requestURL>
<headers />
<authentication>
    <username>blackbox1</username>
    <password>sandbox</password>
</authentication>
<inputbody type="post">
    <weight>-1.0001</weight>
</inputbody>
<expectedOutput type="python">
assert response.code == 400, 'expected a response code of 400 but got %s instead' % response.code
</expectedOutput>
</testcase>

<testcase>
<name>PUT link with too postiive of a weight</name>
<requestMethod>PUT</requestMethod>
<requestURL>http://localhost:8080/links/a/b</requestURL>
<headers />
<authentication>
    <username>blackbox1</username>
    <password>sandbox</password>
</authentication>
<inputbody type="post">
    <weight>1.0001</weight>
</inputbody>
<expectedOutput type="python">
assert response.code == 400, 'expected a response code of 400 but got %s instead' % response.code
</expectedOutput>
</testcase>

<testcase>
<name>PUT link with non-existent from node</name>
<requestMethod>PUT</requestMethod>
<requestURL>http://localhost:8080/links/doesntexist/b</requestURL>
<headers />
<authentication>
    <username>blackbox1</username>
    <password>sandbox</password>
</authentication>
<inputbody type="post">
    <weight>1.0</weight>
</inputbody>
<expectedOutput type="python">
assert response.code == 404, 'expected a response code of 404 but got %s instead' % response.code
</expectedOutput>
</testcase>

<testcase>
<name>PUT link with non-existent to node</name>
<requestMethod>PUT</requestMethod>
<requestURL>http://localhost:8080/links/a/doesntexist</requestURL>
<headers />
<authentication>
    <username>blackbox1</username>
    <password>sandbox</password>
</authentication>
<inputbody type="post">
    <weight>1.0</weight>
</inputbody>
<expectedOutput type="python">
assert response.code == 404, 'expected a response code of 404 but got %s instead' % response.code
</expectedOutput>
</testcase>

<!-- Legal PUTs -->

<testcase>
<name>PUT link without tags</name>
<requestMethod>PUT</requestMethod>
<requestURL>http://localhost:8080/links/a/x</requestURL>
<headers />
<authentication>
    <username>blackbox1</username>
    <password>sandbox</password>
</authentication>
<inputbody type="post">
    <weight>0.0</weight>
</inputbody>
<expectedOutput type="python">
assert response.code == 200, 'expected a response code of 200 but got %s instead' % response.code

import simplejson
json = simplejson.loads(contents)

assert json['weight'] == 0.0
assert json['update_date']
assert len(json['tags']) == 0
</expectedOutput>
</testcase>

<testcase>
<name>update link with new weight</name>
<requestMethod>PUT</requestMethod>
<requestURL>http://localhost:8080/links/a/x</requestURL>
<headers />
<authentication>
    <username>blackbox1</username>
    <password>sandbox</password>
</authentication>
<inputbody type="post">
    <weight>0.5</weight>
</inputbody>
<expectedOutput type="python">
assert response.code == 200, 'expected a response code of 200 but got %s instead' % response.code

import simplejson
json = simplejson.loads(contents)

assert json['weight'] == 0.5
assert json['update_date']
assert len(json['tags']) == 0
</expectedOutput>
</testcase>

<testcase>
<name>update link with tags</name>
<requestMethod>PUT</requestMethod>
<requestURL>http://localhost:8080/links/a/x</requestURL>
<headers />
<authentication>
    <username>blackbox1</username>
    <password>sandbox</password>
</authentication>
<inputbody type="post">
    <tags>tag1 tag2</tags>
</inputbody>
<expectedOutput type="python">
assert response.code == 200, 'expected a response code of 200 but got %s instead' % response.code

import simplejson
json = simplejson.loads(contents)

assert json['weight'] == 0.5
assert json['update_date']
assert len(json['tags']) == 2
assert 'tag1' in json['tags']
assert 'tag2' in json['tags']
</expectedOutput>
</testcase>

<!-- GET links -->

<testcase>
<name>GET link with non-existent from node</name>
<requestMethod>GET</requestMethod>
<requestURL>http://localhost:8080/links/doesntexist/x</requestURL>
<headers />
<expectedOutput type="python">
assert response.code == 404, 'expected a response code of 404 but got %s instead' % response.code
</expectedOutput>
</testcase>

<testcase>
<name>GET link with non-existent to node</name>
<requestMethod>GET</requestMethod>
<requestURL>http://localhost:8080/links/a/doesntexist</requestURL>
<headers />
<expectedOutput type="python">
assert response.code == 404, 'expected a response code of 404 but got %s instead' % response.code
</expectedOutput>
</testcase>

<testcase>
<name>GET link that doesn't exist</name>
<requestMethod>GET</requestMethod>
<requestURL>http://localhost:8080/links/b/x</requestURL>
<headers />
<expectedOutput type="python">
assert response.code == 404, 'expected a response code of 404 but got %s instead' % response.code
</expectedOutput>
</testcase>

<testcase>
<name>GET link</name>
<requestMethod>GET</requestMethod>
<requestURL>http://localhost:8080/links/a/x</requestURL>
<headers />
<expectedOutput type="python">
assert response.code == 200, 'expected a response code of 200 but got %s instead' % response.code
</expectedOutput>
</testcase>

<!-- DELETE links -->

<testcase>
<name>unauthorized DELETE</name>
<requestMethod>DELETE</requestMethod>
<requestURL>http://localhost:8080/links/x/a</requestURL>
<headers />
<authentication>
    <username>blackbox1</username>
    <password>sandbox</password>
</authentication>
<expectedOutput type="python">
assert response.code == 403, 'expected a response code of 403 but got %s instead' % response.code
</expectedOutput>
</testcase>

<testcase>
<name>DELETE non-existent from node</name>
<requestMethod>DELETE</requestMethod>
<requestURL>http://localhost:8080/links/nonexistent/a</requestURL>
<headers />
<authentication>
    <username>blackbox1</username>
    <password>sandbox</password>
</authentication>
<expectedOutput type="python">
assert response.code == 404, 'expected a response code of 404 but got %s instead' % response.code
</expectedOutput>
</testcase>

<testcase>
<name>DELETE non-existent to node</name>
<requestMethod>DELETE</requestMethod>
<requestURL>http://localhost:8080/links/a/nonexistent</requestURL>
<headers />
<authentication>
    <username>blackbox1</username>
    <password>sandbox</password>
</authentication>
<expectedOutput type="python">
assert response.code == 404, 'expected a response code of 404 but got %s instead' % response.code
</expectedOutput>
</testcase>

<testcase>
<name>legal link DELETE</name>
<requestMethod>DELETE</requestMethod>
<requestURL>http://localhost:8080/links/a/x</requestURL>
<headers />
<authentication>
    <username>blackbox1</username>
    <password>sandbox</password>
</authentication>
<expectedOutput type="python">
assert response.code == 200, 'expected a response code of 200 but got %s instead' % response.code
</expectedOutput>
</testcase>

<!-- Cleanup -->

<testcase>
<name>Cleanup #1</name>
<requestMethod>DELETE</requestMethod>
<requestURL>http://localhost:8080/nodes/a</requestURL>
<headers />
<authentication>
    <username>blackbox1</username>
    <password>sandbox</password>
</authentication>
<expectedOutput type="python">
assert response.code == 200, 'expected a response code of 200 but got %s instead' % response.code
</expectedOutput>
</testcase>

<testcase>
<name>Cleanup #2</name>
<requestMethod>DELETE</requestMethod>
<requestURL>http://localhost:8080/nodes/b</requestURL>
<headers />
<authentication>
    <username>blackbox1</username>
    <password>sandbox</password>
</authentication>
<expectedOutput type="python">
assert response.code == 200, 'expected a response code of 200 but got %s instead' % response.code
</expectedOutput>
</testcase>

<testcase>
<name>Cleanup #3</name>
<requestMethod>DELETE</requestMethod>
<requestURL>http://localhost:8080/nodes/x</requestURL>
<headers />
<authentication>
    <username>blackbox2</username>
    <password>sandbox</password>
</authentication>
<expectedOutput type="python">
assert response.code == 200, 'expected a response code of 200 but got %s instead' % response.code
</expectedOutput>
</testcase>

</test>