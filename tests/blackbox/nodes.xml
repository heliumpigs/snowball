<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright 2009 Yusuf Simonson
  This file is part of Snowball.
  
  Snowball is free software: you can redistribute it and/or modify it under the
  terms of the GNU Affero General Public License as published by the Free
  Software Foundation, either version 3 of the License, or (at your option) any
  later version.

  Snowball is distributed in the hope that it will be useful, but WITHOUT ANY
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
  A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
  details.

  You should have received a copy of the GNU Affero General Public License
  along with Snowball.  If not, see <http://www.gnu.org/licenses/>.
-->

<test>
   <!-- Testing POST -->
   <testcase name="POST a node with tags">
      <request method="POST" url="http://localhost:8080/nodes">
         <auth username="blackbox1" password="sandbox"/>
         <body type="post">
            <param name="tags">tag1 tag2</param>
            <param name="error_format">verbose_txt</param>
         </body>
      </request>
      <status>200</status>
      <contents type="python">
         import simplejson
         json = simplejson.loads(contents)
         
         assert json['links'] == {}
         assert json['creation_date']
         assert json['owner'] == 'blackbox1'
         assert json['type'] == 'node'
         assert json['id']
         assert len(json['tags']) == 2
         assert 'tag1' in json['tags']
         assert 'tag2' in json['tags']
      </contents>
   </testcase>
   
   <testcase name="POST a node without tags">
      <request method="POST" url="http://localhost:8080/nodes?error_format=verbose_txt">
         <auth username="blackbox1" password="sandbox"/>
      </request>
      <status>200</status>
      <contents type="python">
         import simplejson
         json = simplejson.loads(contents)
         
         assert json['links'] == {}
         assert json['creation_date']
         assert json['owner'] == 'blackbox1'
         assert json['type'] == 'node'
         assert json['id']
         assert len(json['tags']) == 0
      </contents>
   </testcase>
   
   <!-- Testing PUT -->
   <testcase name="PUT a node without tags">
      <request method="PUT" url="http://localhost:8080/nodes/blackbox1?error_format=verbose_txt">
         <auth username="blackbox1" password="sandbox"/>
      </request>
      <status>200</status>
      <contents type="python">
         import simplejson
         json = simplejson.loads(contents)
         
         assert json['links'] == {}
         assert json['creation_date']
         assert json['owner'] == 'blackbox1'
         assert json['type'] == 'node'
         assert json['id'] == 'blackbox1'
         assert len(json['tags']) == 0
      </contents>
   </testcase>
   
   <testcase name="PUT a node with tags">
      <request method="PUT" url="http://localhost:8080/nodes/blackbox1">
         <auth username="blackbox1" password="sandbox"/>
         <body type="post">
            <param name="tags">tag1 tag2</param>
            <param name="error_format">verbose_txt</param>
         </body>
      </request>
      <status>200</status>
      <contents type="python">
         import simplejson
         json = simplejson.loads(contents)
         
         assert json['links'] == {}
         assert json['creation_date']
         assert json['owner'] == 'blackbox1'
         assert json['type'] == 'node'
         assert json['id'] == 'blackbox1'
         assert len(json['tags']) == 2
         assert 'tag1' in json['tags']
         assert 'tag2' in json['tags']
      </contents>
   </testcase>
   
   <!-- Testing to make sure you cannot overwrite another account's node -->
   <testcase name="testing security of node PUT (step 1)">
      <request method="PUT" url="http://localhost:8080/nodes/blackbox2?error_format=verbose_txt">
         <auth username="blackbox2" password="sandbox"/>
      </request>
      <status>200</status>
   </testcase>
   
   <testcase name="testing security of node PUT (step 2)">
      <request method="PUT" url="http://localhost:8080/nodes/blackbox2">
         <auth username="blackbox1" password="sandbox"/>
         <body type="post">
            <param name="tags">tag1 tag2</param>
            <param name="error_format">verbose_txt</param>
         </body>
      </request>
      <status>403</status>
   </testcase>
   
   <!-- Testing GET -->
   <testcase name="GET a node owned by the account">
      <request method="GET" url="http://localhost:8080/nodes/blackbox1?error_format=verbose_txt"/>
      <status>200</status>
      <contents type="python">
         import simplejson
         json = simplejson.loads(contents)
         
         assert json['links'] == {}
         assert json['creation_date']
         assert json['owner'] == 'blackbox1'
         assert json['type'] == 'node'
         assert json['id'] == 'blackbox1'
         assert len(json['tags']) == 2
         assert 'tag1' in json['tags']
         assert 'tag2' in json['tags']
      </contents>
   </testcase>
   
   <testcase name="GET a node not owned by the account">
      <request method="GET" url="http://localhost:8080/nodes/blackbox2?error_format=verbose_txt"/>
      <status>200</status>
      <contents type="python">
         import simplejson
         json = simplejson.loads(contents)
         
         assert json['links'] == {}
         assert json['creation_date']
         assert json['owner'] == 'blackbox2'
         assert json['type'] == 'node'
         assert json['id'] == 'blackbox2'
         assert len(json['tags']) == 0
      </contents>
   </testcase>
   
   <testcase name="GET a node that doesn't exist">
      <request method="GET" url="http://localhost:8080/nodes/nothere?error_format=verbose_txt"/>
      <status>404</status>
   </testcase>
   
   <!-- Testing DELETE -->
   <testcase name="DELETE a node that doesn't exist">
      <request method="DELETE" url="http://localhost:8080/nodes/nothere?error_format=verbose_txt">
         <auth username="blackbox1" password="sandbox"/>
      </request>
      <status>404</status>
   </testcase>
   
   <testcase name="DELETE a node that the account owns">
      <request method="DELETE" url="http://localhost:8080/nodes/blackbox1?error_format=verbose_txt">
         <auth username="blackbox1" password="sandbox"/>
      </request>
      <status>200</status>
   </testcase>
   
   <testcase name="DELETE a node that the account doesn't own">
      <request method="DELETE" url="http://localhost:8080/nodes/blackbox2?error_format=verbose_txt">
         <auth username="blackbox1" password="sandbox"/>
      </request>
      <status>403</status>
   </testcase>
   
   <!-- Testing cascading DELETE -->
   <testcase name="cascading DELETE (step 1)">
      <request method="PUT" url="http://localhost:8080/nodes/blackbox1?error_format=verbose_txt">
         <auth username="blackbox1" password="sandbox"/>
      </request>
      <status>200</status>
   </testcase>
   
   <testcase name="cascading DELETE (step 2)">
      <request method="PUT" url="http://localhost:8080/links/blackbox1/blackbox2">
         <auth username="blackbox1" password="sandbox"/>
         <body type="post">
            <param name="weight">1.0</param>
            <param name="error_format">verbose_txt</param>
         </body>
      </request>
      <status>200</status>
   </testcase>
   
   <testcase name="cascading DELETE (step 3)">
      <request method="DELETE" url="http://localhost:8080/nodes/blackbox2?error_format=verbose_txt">
         <auth username="blackbox2" password="sandbox"/>
      </request>
      <status>200</status>
   </testcase>
   
   <testcase name="cascading DELETE (step 4)">
      <request method="GET" url="http://localhost:8080/nodes/blackbox1?error_format=verbose_txt"/>
      <status>200</status>
      <contents type="python">
         import simplejson
         json = simplejson.loads(contents)
         assert json['links'] == {}
      </contents>
   </testcase>
   
   <testcase name="cascading DELETE (step 5)">
      <request method="DELETE" url="http://localhost:8080/nodes/blackbox1?error_format=verbose_txt">
         <auth username="blackbox1" password="sandbox"/>
      </request>
      <status>200</status>
   </testcase>
</test>